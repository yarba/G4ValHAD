//
// ********************************************************************
// * License and Disclaimer                                           *
// *                                                                  *
// * The  Geant4 software  is  copyright of the Copyright Holders  of *
// * the Geant4 Collaboration.  It is provided  under  the terms  and *
// * conditions of the Geant4 Software License,  included in the file *
// * LICENSE and available at  http://cern.ch/geant4/license .  These *
// * include a list of copyright holders.                             *
// *                                                                  *
// * Neither the authors of this software system, nor their employing *
// * institutes,nor the agencies providing financial support for this *
// * work  make  any representation or  warranty, express or implied, *
// * regarding  this  software system or assume any liability for its *
// * use.  Please see the license in the file  LICENSE  and URL above *
// * for the full disclaimer and the limitation of liability.         *
// *                                                                  *
// * This  code  implementation is the result of  the  scientific and *
// * technical work of the GEANT4 collaboration.                      *
// * By using,  copying,  modifying or  distributing the software (or *
// * any work based  on the software)  you  agree  to acknowledge its *
// * use  in  resulting  scientific  publications,  and indicate your *
// * acceptance of all terms of the Geant4 Software license.          *
// ********************************************************************
//

#include "globals.hh"
#include "G4PhysicalConstants.hh"

#include "G4ios.hh"

#include "G4Material.hh"
#include "G4IsotopeVector.hh"
#include "G4ElementVector.hh"
#include "G4NistManager.hh"

#include "G4ProcessManager.hh"
#include "G4VParticleChange.hh"
#include "G4ParticleChange.hh"
#include "G4HadronCrossSections.hh"
#include "G4VCrossSectionDataSet.hh"

#include "G4HadronInelasticDataSet.hh"

#include "G4ParticleTable.hh"
#include "G4IonTable.hh"

#include "G4ParticleChange.hh"
#include "G4DynamicParticle.hh"

#include "G4MesonConstructor.hh"
#include "G4BaryonConstructor.hh"
#include "G4IonConstructor.hh"
#include "G4LeptonConstructor.hh"
#include "G4BosonConstructor.hh"

#include "G4Gamma.hh"

#include "G4ForceCondition.hh"

#include "G4Box.hh"
#include "G4PVPlacement.hh"
#include "G4Step.hh"
#include "G4GRSVolume.hh"
#include "G4GRSSolid.hh"

#include "G4TrackingManager.hh"
#include "G4Region.hh"

#include "G4StateManager.hh"
#include "G4Navigator.hh"
#include "G4Timer.hh"

// random engine/seed settings
#include "Randomize.hh"

#include "TFile.h"
#include "TH1F.h"
#include "TH1I.h"
#include "TString.h"

#include "G4SystemOfUnits.hh"

#include <fstream>
#include <string>
#include <iostream>
#include <sstream>
#include <iomanip>

#include "FTFPWrapper.hh"
#include "QGSPWrapper.hh"

#include "TestNA61Histo.hh"
#include "TestNA49Histo.hh"

using namespace std;

int main(int argc, char** argv) {

  G4cout <<"========================================================" <<G4endl;
  G4cout <<"======      Gamma-Nuclear Test Start       ========" <<G4endl;
  G4cout <<"========================================================" <<G4endl;

  G4String  namePart = "gamma";
  G4String  nameMatRaw  = "Cu";
  ostringstream osMat(ios_base::out|ios_base::app);// to enable appending in output operations
  G4String  nameGen  = "Bertini";
  G4double  energy   = 0.;
  G4double  m_p      = 300.*MeV;
  G4int     nevt     = 1000;
  G4double theStep   = 0.01*micrometer; // should it not be 0. ?
  G4Material* material = 0;
  G4int  verbose  = 0; 
  
  G4bool isNA61 = false;
  // G4bool isMIPP = false; // for future
  G4bool isNA49 = false; 

//
//
  G4long myseed   = 135799753;
  G4int  jobid = -1;
  // Choose the Random engine
  //
  CLHEP::HepRandom::setTheEngine(new CLHEP::RanecuEngine);
  CLHEP::HepRandom::setTheSeed(myseed);

  // Track
  G4ThreeVector aPosition  = G4ThreeVector(0.,0.,0.);
  G4double      aTime      = 0. ;
  G4ThreeVector aDirection = G4ThreeVector(0.0,0.0,1.0);
  G4double nx = 0.0, ny = 0.0, nz = 0.0;

  // Control on input

  if (argc < 2) {
    G4cout << "Input file is not specified! Exit" << G4endl;
    exit(1);
  }

  std::ifstream* fin = new std::ifstream();
  G4String fname = argv[1];
  fin->open(fname.c_str());
  if( !fin->is_open()) {
    G4cout << "Input file <" << fname << "> does not exist! Exit" << G4endl;
    exit(1);
  }

  /*  G4UImanager* UI = G4UImanager::GetUIpointer();
      G4String command("/tracking/verbose 2");
      UI->ApplyCommand( command );
  */  

  // we need to be in the preinit state to create particles

  if(!G4StateManager::GetStateManager()->SetNewState(G4State_PreInit))
    G4cout << "G4StateManager PROBLEM! " << G4endl;


  // physics needs to be initialized before the 1st use of particle table,
  // because it constructs particles - otherwise the table is just empty
  //
  G4MesonConstructor pMesonConstructor;
  pMesonConstructor.ConstructParticle();

  G4BaryonConstructor pBaryonConstructor;
  pBaryonConstructor.ConstructParticle();  
  
  G4IonConstructor pIonConstructor;
  pIonConstructor.ConstructParticle();
  
  G4LeptonConstructor pLeptonConstructor;
  pLeptonConstructor.ConstructParticle();
  
  G4BosonConstructor pBosonConstructor;
  pBosonConstructor.ConstructParticle();
  

  G4ParticleTable* partTable = G4ParticleTable::GetParticleTable();
  partTable->SetReadiness();

  // Geometry
  //
  G4Box* sFrame = new G4Box ("Box", 100.0*cm, 100.0*cm, 100.0*cm);
  G4LogicalVolume* lFrame = new G4LogicalVolume(sFrame,material,"Box",0,0,0);
  G4PVPlacement* pFrame = new G4PVPlacement(0,G4ThreeVector(),"Box",
                                            lFrame,0,false,0);
  
  assert(pFrame);

  G4Region* rFrame = new G4Region("Region"); // needed by tracking manager
  lFrame->SetRegion(rFrame);
  rFrame->AddRootLogicalVolume(lFrame);

  // ---- Read input file
  G4cout << "Available commands are: " << G4endl;
  G4cout << "#events" << G4endl;
  G4cout << "#particle" << G4endl;
  G4cout << "#energy(MeV)" << G4endl;
  G4cout << "#momentum(MeV/c)" << G4endl;
  G4cout << "#step(mm)" << G4endl;
  G4cout << "#material" << G4endl;
  G4cout << "#generator" << G4endl;
  G4cout << "#verbose" << G4endl;
  G4cout << "#position(mm)" << G4endl;
  G4cout << "#direction" << G4endl;
  G4cout << "#time(ns)" << G4endl; // why would I need this ?
  G4cout << "isNA61" << G4endl;
  
//
// for parallel processing
//
  G4cout << "#randomSeed" << G4endl;
  G4cout << "#jobID" << G4endl;
//
  G4cout << "#run" << G4endl;
  G4cout << "#exit" << G4endl;

  G4String line, line1;
  G4bool end = true;

  for(G4int run=0; run<100; run++) {

    do {
      (*fin) >> line;
      G4cout << "Next line " << line << G4endl;
      if(line == "#particle") {
        (*fin) >> namePart;
      } else if(line == "#momentum(MeV/c)") {
        (*fin) >> m_p;
        m_p *= MeV;
      } else if(line == "#events") {
        (*fin) >> line1;
        istringstream is(line1);
        is >> nevt;
        G4cout << "nevt : " << nevt << G4endl;
      } else if(line == "#step(mm)") {
        (*fin) >> theStep;
        theStep *= mm;
      } else if(line == "#material") {
        (*fin) >> nameMatRaw;
      } else if(line == "#generator") {
        (*fin) >> nameGen;
        G4cout << nameGen << G4endl;
      } else if(line == "#run") {
        break;
      } else if(line == "#verbose") {
        (*fin) >> verbose;
        if (verbose > 0) {
          G4cout <<"test19"
                 <<" : verbose set to "
                 << verbose
                 << G4endl;
        }
      } else if(line == "#position(mm)") {
        (*fin) >> nx >> ny >> nz;
        aPosition = G4ThreeVector(nx*mm, ny*mm, nz*mm);
      } else if(line == "#direction") {
        (*fin) >> nx >> ny >> nz;
        if(nx*nx + ny*ny + nz*nz > 0.0) {
          aDirection = G4ThreeVector(nx, ny, nz);
          aDirection = aDirection.unit();
	}
      } else if(line == "#time(ns)") {
        (*fin) >> aTime;
        aTime *= ns;
      } 
      else if ( line == "#isNA61" )
      {
         isNA61 = true;
      }
      else if ( line == "#isNA49" )
      {
	 isNA49 = true;
      }
//
// needed for parallel processing
//
      else if ( line == "#randomSeed" )
      {
        (*fin) >> myseed;
	CLHEP::HepRandom::setTheSeed(myseed);
	G4cout << "###### Set Random Seed to " << myseed << "     #####" << G4endl;      
      }
      else if ( line == "#jobID" )
      {
        (*fin) >> jobid ;
      }
//
      else if(line == "#exit") 
      {
        end = false;
        break;
      }
    } while(end);

    if(!end) break;

    G4cout << "###### Start new run # " << run << "     #####" << G4endl;

    osMat.clear();
    osMat.str("G4_");
    osMat << nameMatRaw;
    G4String nameMat = osMat.str();

    G4cout << "###### Material: " << nameMat << " derived from " << nameMatRaw << G4endl;

    material = G4NistManager::Instance()->FindOrBuildMaterial(nameMat);

    if (!material) {
      G4cout << "Material <" << nameMat << "> is not found" << G4endl;
      exit(1);
    }

    G4ParticleDefinition* part = 
      (G4ParticleTable::GetParticleTable())->FindParticle(namePart);

    // G4VProcess* proc = 0;
    ProcessWrapper* pWrap =0;
    
    
    // if ( nameGen == "ftfp" )
    if ( nameGen.find("ftf") != std::string::npos )
    {
       pWrap = new FTFPWrapper();
    }
    // else if ( nameGen == "qgsp" )
    else if ( nameGen.find("qgs") != std::string::npos )
    {
       pWrap = new QGSPWrapper();
    }
    
    if (!pWrap) { 
      G4cout << "For particle: " << part->GetParticleName()
	     << " generator " << nameGen << " is unavailable"
	     << G4endl;
      exit(1);
    } 
    
    std::cout << " process = " << pWrap->GetProcessName() << std::endl;
    
    if ( nameGen.find("lund-str-fragm") != std::string::npos )
    {
       pWrap->UseG4LundStringFragm(true);
    }
    
    pWrap->Compose();
    
    pWrap->InitTarget( material );
    // proc = pWrap;
        
    G4ProcessManager* man = 0;
    if ( namePart == "proton" ) man = new G4ProcessManager(G4Proton::Proton());
    man->AddDiscreteProcess(pWrap);
        
    G4double mass = part->GetPDGMass();
    energy = sqrt(m_p*m_p + mass*mass);

    const G4Element* elm = material->GetElement(0);
    G4int A = (G4int)(elm->GetN()+0.5);
    G4int Z = (G4int)(elm->GetZ()+0.5);
    G4double amass = G4ParticleTable::GetParticleTable()->GetIonTable()->GetIonMass(Z, A);

    // Create a DynamicParticle
    G4DynamicParticle dParticle(part,aDirection,energy);
    
    // cross-section data set
    // in principle, can be different for "elastic", or "LElastic, or "BertiniElastic"
    //
    G4VCrossSectionDataSet* cs = new G4HadronInelasticDataSet();
    
     
    // xsec for normalization
    //
    G4double cross_sec = 0.;
    if(cs) 
    {
      cs->BuildPhysicsTable(*part);
      cross_sec = cs->GetCrossSection(&dParticle, elm);
    } 
    else 
    {
       cross_sec = (G4HadronCrossSections::Instance())->GetInelasticCrossSection(&dParticle, Z, A );
    }
    cross_sec /= CLHEP::millibarn;
    G4cout << "    cross(b)= " << cross_sec << " mb" << G4endl;

    G4Track* gTrack;
    gTrack = new G4Track(&dParticle,aTime,aPosition);
    
    G4TouchableHandle fpTouchable(new G4TouchableHistory());
    gTrack->SetTouchableHandle(fpTouchable);
    
    // now book histograms
    //
    Test19Histo* histo = 0;
    if ( isNA61 ) 
    {
       histo = new TestNA61Histo( namePart, nameMatRaw, nameGen );
    } // other cases will be NA49, MIPP, etc.
    else if ( isNA49 )
    {
       histo = new TestNA49Histo( namePart, nameMatRaw, nameGen );
    }
    
    if ( !histo )
    {
       G4cout << " Histograms NOT booked" << G4endl;
       exit(1);
    }
    
    // -------- Step

    G4Step* step;
    step = new G4Step();
    step->SetTrack(gTrack);
    gTrack->SetStep(step);
    
    G4StepPoint *aPoint, *bPoint;
    aPoint = new G4StepPoint();
    aPoint->SetPosition(aPosition);
    aPoint->SetMaterial(material);
    G4double safety = 10000.*CLHEP::cm;
    aPoint->SetSafety(safety);
    step->SetPreStepPoint(aPoint);

    bPoint = aPoint;
    G4ThreeVector bPosition = aDirection*theStep;
    bPosition += aPosition;
    bPoint->SetPosition(bPosition);
    step->SetPostStepPoint(bPoint);
    step->SetStepLength(theStep);

    if(!G4StateManager::GetStateManager()->SetNewState(G4State_Idle))
      G4cout << "G4StateManager PROBLEM! " << G4endl;

    G4Timer* timer = new G4Timer();
    timer->Start();

    G4ThreeVector   mom;
    G4LorentzVector labv, labp;
    
    G4VParticleChange* aChange = 0;
    // G4ThreeVector newPosition(aPosition);

    for (G4int iter=0; iter<nevt; ++iter) 
    {
    
       G4double e0 = energy-mass;

       dParticle.SetKineticEnergy(e0);

       // gTrack->SetStep(step);
       gTrack->SetKineticEnergy(e0);
   
       labv = G4LorentzVector(0., 0., sqrt(e0*(e0 + 2.0*mass))/GeV,
                             (e0 + mass + amass)/GeV);
   
       // if under an agnle, then like this:
       //labv = G4LorentzVector(mom.x()/CLHEP::GeV, mom.y()/CLHEP::GeV, 
       //			      mom.z()/CLHEP::GeV, (e0+mass+amass)/CLHEP::GeV);
       
       labp = G4LorentzVector(0., 0., sqrt(e0*(e0 + 2.0*mass))/GeV,
                             (e0 + mass + G4Proton::Proton()->GetPDGMass())/GeV);

       // model 1 interaction
       //
       aChange = pWrap->PostStepDoIt(*gTrack,*step);
       
       // Fill up histograms
       //
       histo->FillEvt( aChange, labv, labp );
       
       // loop over secondaries and cleanup
       //
       G4int nsec = aChange->GetNumberOfSecondaries();
       
/*
       for (G4int i=0; i<nsec; i++) {
       
            const G4Track*           ssTrack = aChange->GetSecondary(i);
            G4TrackStatus ssts =  	ssTrack->GetTrackStatus();
            const G4DynamicParticle* ssdp = ssTrack->GetDynamicParticle();
            const G4ParticleDefinition* ssdpd = ssdp->GetDefinition();
            G4String ssName = ssdpd->GetParticleName();
            if (verbose>=1) 
	    {
              G4cout << "Secondary: " << i
                     << " is " << ssName
                     << ", " << ssdp->GetPDGcode()
                     << ", status: " << ssts
                     << " with kinetic energy of " 
                     << ssdp->GetKineticEnergy()/GeV 
                     << " and momentum of " 
                     << ssdp->GetTotalMomentum()/GeV << " GeV"
                     << G4endl;
            }
       }
*/       
       
       for (G4int i=0; i<nsec; i++) 
       {   
          delete aChange->GetSecondary(i);
       } 
       aChange->Clear();
       
    } // end loop over events
    
    timer->Stop();
    G4cout << "  " << *timer << G4endl;
    delete timer;
    
    //delete process
    //
    delete pWrap;
    
    // write out histograms
    //
    histo->Write(nevt);
    
    // delete histograms
    //
    if ( histo ) delete histo ;


  } // end of loop ovre "runs", 
    // i.e. various combinations of beam+energy+target+model

  delete fin;

  G4cout << "###### End of test #####" << G4endl;
}
